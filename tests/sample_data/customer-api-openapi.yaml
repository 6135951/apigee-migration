openapi: 3.0.3
info:
  title: Customer Management API
  description: |
    Comprehensive customer management system API for handling customer data,
    profiles, preferences, and related operations. This API follows RESTful
    principles and provides comprehensive CRUD operations for customer management.
    
    **Features:**
    - Customer profile management
    - Address management
    - Preference handling
    - Authentication and authorization
    - Rate limiting and monitoring
  version: 2.1.0
  contact:
    name: Customer API Team
    email: customer-api@example.com
    url: https://docs.example.com/customer-api
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://example.com/terms

servers:
  - url: https://api.customers.example.com/v2
    description: Production server
  - url: https://staging-api.customers.example.com/v2
    description: Staging server
  - url: https://dev-api.customers.example.com/v2
    description: Development server

security:
  - bearerAuth: []
  - apiKey: []

tags:
  - name: Customers
    description: Customer management operations
  - name: Addresses
    description: Customer address management
  - name: Preferences
    description: Customer preference management
  - name: Health
    description: API health and monitoring endpoints

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check endpoint
      description: Check the API health and status
      operationId: getHealth
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
              example:
                status: healthy
                timestamp: '2024-01-15T10:30:00Z'
                version: '2.1.0'
                uptime: 3600

  /customers:
    get:
      tags: [Customers]
      summary: List customers
      description: Retrieve a paginated list of customers with optional filtering
      operationId: listCustomers
      parameters:
        - name: limit
          in: query
          description: Number of customers to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of customers to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: search
          in: query
          description: Search term for customer name or email
          required: false
          schema:
            type: string
            maxLength: 255
        - name: status
          in: query
          description: Filter by customer status
          required: false
          schema:
            type: string
            enum: [active, inactive, suspended]
        - name: sortBy
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            enum: [name, email, createdAt, updatedAt]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of customers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Customers]
      summary: Create customer
      description: Create a new customer with validation
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomer'
            examples:
              basic_customer:
                summary: Basic customer creation
                value:
                  name: John Doe
                  email: john.doe@example.com
                  phone: +1-555-123-4567
              customer_with_address:
                summary: Customer with address
                value:
                  name: Jane Smith
                  email: jane.smith@example.com
                  phone: +1-555-987-6543
                  addresses:
                    - type: home
                      street: 123 Main St
                      city: New York
                      state: NY
                      zipCode: '10001'
                      country: USA
      responses:
        '201':
          description: Customer created successfully
          headers:
            Location:
              description: URL of the created customer
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Customer already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          $ref: '#/components/responses/ValidationError'

  /customers/{customerId}:
    parameters:
      - $ref: '#/components/parameters/CustomerId'

    get:
      tags: [Customers]
      summary: Get customer by ID
      description: Retrieve detailed customer information by ID
      operationId: getCustomer
      responses:
        '200':
          description: Customer details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetail'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Customers]
      summary: Update customer
      description: Update customer information
      operationId: updateCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomer'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags: [Customers]
      summary: Delete customer
      description: Soft delete a customer (marks as inactive)
      operationId: deleteCustomer
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot delete customer with active orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customers/{customerId}/addresses:
    parameters:
      - $ref: '#/components/parameters/CustomerId'

    get:
      tags: [Addresses]
      summary: Get customer addresses
      description: Retrieve all addresses for a customer
      operationId: getCustomerAddresses
      responses:
        '200':
          description: Customer addresses retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'

    post:
      tags: [Addresses]
      summary: Add customer address
      description: Add a new address for the customer
      operationId: addCustomerAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddress'
      responses:
        '201':
          description: Address added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'

  /customers/{customerId}/preferences:
    parameters:
      - $ref: '#/components/parameters/CustomerId'

    get:
      tags: [Preferences]
      summary: Get customer preferences
      operationId: getCustomerPreferences
      responses:
        '200':
          description: Customer preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPreferences'

    put:
      tags: [Preferences]
      summary: Update customer preferences
      operationId: updateCustomerPreferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePreferences'
      responses:
        '200':
          description: Preferences updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPreferences'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from authentication endpoint
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service-to-service authentication

  parameters:
    CustomerId:
      name: customerId
      in: path
      required: true
      description: Unique customer identifier
      schema:
        type: string
        format: uuid
        pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      example: 123e4567-e89b-12d3-a456-426614174000

  schemas:
    Customer:
      type: object
      required: [id, name, email, status, createdAt]
      properties:
        id:
          type: string
          format: uuid
          description: Unique customer identifier
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Customer full name
          example: John Doe
        email:
          type: string
          format: email
          maxLength: 320
          description: Customer email address
          example: john.doe@example.com
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Customer phone number
          example: '+1-555-123-4567'
        status:
          type: string
          enum: [active, inactive, suspended]
          description: Customer account status
          default: active
        createdAt:
          type: string
          format: date-time
          description: Customer creation timestamp
          example: '2024-01-15T10:30:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: '2024-01-20T14:45:30Z'
        metadata:
          type: object
          additionalProperties: true
          description: Additional customer metadata

    CustomerDetail:
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          properties:
            addresses:
              type: array
              items:
                $ref: '#/components/schemas/Address'
            preferences:
              $ref: '#/components/schemas/CustomerPreferences'
            statistics:
              type: object
              properties:
                totalOrders:
                  type: integer
                  minimum: 0
                totalSpent:
                  type: number
                  format: float
                  minimum: 0
                lastOrderDate:
                  type: string
                  format: date-time

    CreateCustomer:
      type: object
      required: [name, email]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 320
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        addresses:
          type: array
          maxItems: 10
          items:
            $ref: '#/components/schemas/CreateAddress'
        preferences:
          $ref: '#/components/schemas/UpdatePreferences'
        metadata:
          type: object
          additionalProperties: true

    UpdateCustomer:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 320
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        status:
          type: string
          enum: [active, inactive, suspended]
        metadata:
          type: object
          additionalProperties: true

    Address:
      type: object
      required: [id, type, street, city, country]
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [home, work, billing, shipping]
          description: Address type
        street:
          type: string
          minLength: 1
          maxLength: 255
          example: 123 Main Street
        city:
          type: string
          minLength: 1
          maxLength: 100
          example: New York
        state:
          type: string
          minLength: 1
          maxLength: 100
          example: NY
        zipCode:
          type: string
          pattern: '^[0-9A-Za-z\s-]{3,10}$'
          example: '10001'
        country:
          type: string
          minLength: 2
          maxLength: 3
          pattern: '^[A-Z]{2,3}$'
          example: USA
        isDefault:
          type: boolean
          default: false

    CreateAddress:
      type: object
      required: [type, street, city, country]
      properties:
        type:
          type: string
          enum: [home, work, billing, shipping]
        street:
          type: string
          minLength: 1
          maxLength: 255
        city:
          type: string
          minLength: 1
          maxLength: 100
        state:
          type: string
          maxLength: 100
        zipCode:
          type: string
          pattern: '^[0-9A-Za-z\s-]{3,10}$'
        country:
          type: string
          minLength: 2
          maxLength: 3
          pattern: '^[A-Z]{2,3}$'
        isDefault:
          type: boolean
          default: false

    CustomerPreferences:
      type: object
      properties:
        communication:
          type: object
          properties:
            email:
              type: boolean
              default: true
            sms:
              type: boolean
              default: false
            phone:
              type: boolean
              default: false
            push:
              type: boolean
              default: true
        marketing:
          type: object
          properties:
            newsletter:
              type: boolean
              default: false
            promotions:
              type: boolean
              default: false
            productUpdates:
              type: boolean
              default: true
        privacy:
          type: object
          properties:
            shareData:
              type: boolean
              default: false
            analytics:
              type: boolean
              default: true
        locale:
          type: object
          properties:
            language:
              type: string
              pattern: '^[a-z]{2}(-[A-Z]{2})?$'
              default: en-US
              example: en-US
            timezone:
              type: string
              format: timezone
              default: UTC
              example: America/New_York
            currency:
              type: string
              pattern: '^[A-Z]{3}$'
              default: USD
              example: USD

    UpdatePreferences:
      type: object
      properties:
        communication:
          type: object
          properties:
            email: { type: boolean }
            sms: { type: boolean }
            phone: { type: boolean }
            push: { type: boolean }
        marketing:
          type: object
          properties:
            newsletter: { type: boolean }
            promotions: { type: boolean }
            productUpdates: { type: boolean }
        privacy:
          type: object
          properties:
            shareData: { type: boolean }
            analytics: { type: boolean }
        locale:
          type: object
          properties:
            language:
              type: string
              pattern: '^[a-z]{2}(-[A-Z]{2})?$'
            timezone:
              type: string
              format: timezone
            currency:
              type: string
              pattern: '^[A-Z]{3}$'

    HealthStatus:
      type: object
      required: [status, timestamp]
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        uptime:
          type: integer
          description: Uptime in seconds
        dependencies:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              status: { type: string }
              responseTime: { type: integer }

    Pagination:
      type: object
      properties:
        limit:
          type: integer
          minimum: 1
        offset:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
        hasMore:
          type: boolean

    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          description: Error code identifier
        message:
          type: string
          description: Human-readable error message
        details:
          type: string
          description: Additional error details
        timestamp:
          type: string
          format: date-time
        traceId:
          type: string
          format: uuid
          description: Request trace identifier

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            errors:
              type: array
              items:
                type: object
                required: [field, message]
                properties:
                  field:
                    type: string
                    description: Field that failed validation
                  message:
                    type: string
                    description: Validation error message
                  code:
                    type: string
                    description: Validation error code

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: unauthorized
            message: Authentication required
            timestamp: '2024-01-15T10:30:00Z'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: not_found
            message: Customer not found
            timestamp: '2024-01-15T10:30:00Z'

    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'